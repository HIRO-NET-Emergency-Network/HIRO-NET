function [x_NEW_POIS,y_NEW_POIS,old_poi_narrow,new_poi_narrow] = generateNewPoIsPathAware(MAX_NEW_POIS,N_samples,variance_gaussian,X_axis,Y_axis,n,x_original_pois,y_original_pois,x_added_but_old_pois,y_added_but_old_pois,old_poi_broad,distance_between_points,y)
%GENERATENEWPOISPATHAWARE This function generates MAX_NEW_POIS new PoIs.
% This function generates MAX_NEW_POIS new PoIs according to the synthetic
% Gaussian Distribution generated by considering original PoIs, and PoIs
% added in previous steps by the same algorithm. 

% Generate the synthetic Gaussian Distribution from original PoIs, and PoIs added in previous steps 
old_poi_narrow = zeros(N_samples);
for k = 1 : length(n)
    old_poi_narrow=old_poi_narrow+exp(-((X_axis-x_original_pois(k)).^2/(variance_gaussian))-((Y_axis-y_original_pois(k)).^2/(variance_gaussian)));
end
if ~isempty(x_added_but_old_pois)
    for k = 1 : length(x_added_but_old_pois)
        old_poi_narrow=old_poi_narrow+exp(-((X_axis-x_added_but_old_pois(k)).^2/(variance_gaussian))-((Y_axis-y_added_but_old_pois(k)).^2/(variance_gaussian)));
    end
end

% Normalize
old_poi_narrow = old_poi_narrow./max(max(old_poi_narrow));
% poi_broad = N_max_users.*poi_broad./max(max(poi_broad)); % Use this version if N_max_users != 1

% Remove already visited PoIs from the map and generate a mask to avoid the
% generation of too many adjacient PoIs. The mask is an identity matrix
% whose center element is set to 0.
new_map = subplus((old_poi_broad-old_poi_narrow)./max(max(old_poi_broad)));
mask = ones(distance_between_points);  
index = 0.5*(distance_between_points+1); % Half the number of rows + 1
element = 2*(index^2)-2*index+1; % Index of the center element
mask(element) = 0; % Set it to 0
B = ordfilt2(new_map,numel(mask)-1,mask); % Order the elements by using ordfilt2() function
peaks = new_map > B; % Use the mask to identify peaks
ix = find(peaks); % The peaks' indexes

% Select the best MAX_NEW_POIS PoIs to visit
t = [new_map(ix) (1:length(ix))'];
[~,idx] = sort(t(:,1),'descend'); % Sort just the first column in descending order
sortedmat = t(idx,:);   % Sort the whole matrix using the sort indices
if length(idx) > MAX_NEW_POIS
    best_poi_indices = sortedmat(1:MAX_NEW_POIS,2); % Pick only MAX_NEW_POIS PoIs if there are more than MAX_NEW_POIS available
else
    best_poi_indices = sortedmat(:,2);
end

% Get new PoIs' coordinates and their expected revenue
x_NEW_POIS = X_axis(ix(best_poi_indices));
y_NEW_POIS = Y_axis(ix(best_poi_indices));
value_new_map = new_map(ix(best_poi_indices));

% Generate and plot the new synthetic Gaussian Distribution
new_poi_narrow = zeros(N_samples);
for k = 1 : length(x_NEW_POIS)
    %     new_poi_narrow=new_poi_narrow+n_new_pois(k)*exp(-((X_axis-x(k)).^2/(variance_gaussian_narrow))-((Y_axis-y(k)).^2/(variance_gaussian_narrow)));
    %     % use this if n_new_pois(k) > 1.
    new_poi_narrow=new_poi_narrow+exp(-((X_axis-x_NEW_POIS(k)).^2/(variance_gaussian))-((Y_axis-y_NEW_POIS(k)).^2/(variance_gaussian)));
end
new_poi_narrow = new_poi_narrow./max(max(new_poi_narrow));

% Plot the newly generated distribution
figure(10)
imshow(y);
title('Newly Generated PoIs')
hold on
plot3(x_NEW_POIS,y_NEW_POIS,value_new_map,'bo','MarkerSize',16,'MarkerFaceColor','b')
plot3(X_axis(ix),Y_axis(ix),new_map(ix),'rs','MarkerSize',10,'MarkerFaceColor','r')
surf(X_axis,Y_axis,new_map,'LineStyle','none')
view([0 90]);
set(gcf, 'Position', [1, 1, 1071.2000000000003, 771.2000])
axis([1 1101 1 834])
legend('Selected PoIs','New PoI candidates')
end
